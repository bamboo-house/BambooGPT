generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  threads       Thread[]
}

model Thread {
  id        Int      @id @default(autoincrement())
  userId    String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  chats     Chat[]
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "Thread_userId_fkey")
}

model Chat {
  id               Int       @id @default(autoincrement())
  threadId         Int
  model            String
  temperature      Float?
  topP             Float?
  n                Int?
  stream           Boolean?
  stop             String?
  maxTokens        Int?
  presencePenalty  Float?
  frequencyPenalty Float?
  logitBias        String?
  user             String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  thread           Thread    @relation(fields: [threadId], references: [id])
  messages         Message[]

  @@index([threadId], map: "Chat_threadId_fkey")
}

model Message {
  id        Int      @id @default(autoincrement())
  chatId    Int
  role      Role
  content   String?
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  chat      Chat     @relation(fields: [chatId], references: [id])

  @@index([chatId], map: "Message_chatId_fkey")
}

enum Role {
  System
  User
  Assistant
  Function
}
